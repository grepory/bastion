// Code generated by protoc-gen-go.
// source: proto/checker.proto
// DO NOT EDIT!

/*
Package checker is a generated protocol buffer package.

It is generated from these files:
	proto/checker.proto

It has these top-level messages:
	Any
	Timestamp
	Target
	Check
	Assertion
	Header
	HttpCheck
	Metric
	HttpResponse
	CheckResourceResponse
	ResourceResponse
	CheckResourceRequest
	TestCheckRequest
	TestCheckResponse
	CheckResponse
	CheckResult
	DiscoveryEvent
*/
package checker

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Any struct {
	TypeUrl string `protobuf:"bytes,1,opt,name=type_url" json:"type_url,omitempty"`
	Value   []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Any) Reset()                    { *m = Any{} }
func (m *Any) String() string            { return proto.CompactTextString(m) }
func (*Any) ProtoMessage()               {}
func (*Any) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Timestamp struct {
	Seconds int64 `protobuf:"varint,1,opt,name=seconds" json:"seconds,omitempty"`
	Nanos   int64 `protobuf:"varint,2,opt,name=nanos" json:"nanos,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Target struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Id      string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Address string `protobuf:"bytes,4,opt,name=address" json:"address,omitempty"`
}

func (m *Target) Reset()                    { *m = Target{} }
func (m *Target) String() string            { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()               {}
func (*Target) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Check struct {
	Id         string       `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Interval   int32        `protobuf:"varint,2,opt,name=interval" json:"interval,omitempty"`
	Target     *Target      `protobuf:"bytes,3,opt,name=target" json:"target,omitempty"`
	LastRun    *Timestamp   `protobuf:"bytes,4,opt,name=last_run" json:"last_run,omitempty"`
	CheckSpec  *Any         `protobuf:"bytes,5,opt,name=check_spec" json:"check_spec,omitempty"`
	Name       string       `protobuf:"bytes,6,opt,name=name" json:"name,omitempty"`
	Assertions []*Assertion `protobuf:"bytes,7,rep,name=assertions" json:"assertions,omitempty"`
}

func (m *Check) Reset()                    { *m = Check{} }
func (m *Check) String() string            { return proto.CompactTextString(m) }
func (*Check) ProtoMessage()               {}
func (*Check) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Check) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Check) GetLastRun() *Timestamp {
	if m != nil {
		return m.LastRun
	}
	return nil
}

func (m *Check) GetCheckSpec() *Any {
	if m != nil {
		return m.CheckSpec
	}
	return nil
}

func (m *Check) GetAssertions() []*Assertion {
	if m != nil {
		return m.Assertions
	}
	return nil
}

type Assertion struct {
	// key is one of "code", "header", "body".
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// In the case of key=header, value would be the header field.
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	// relationship is one of: "equal" "notEqual" "empty" "notEmpty" "contain" "notContain" "regExp"
	// we don't use an enum, because proto3 support is not super great.
	Relationship string `protobuf:"bytes,3,opt,name=relationship" json:"relationship,omitempty"`
	Operand      string `protobuf:"bytes,4,opt,name=operand" json:"operand,omitempty"`
}

func (m *Assertion) Reset()                    { *m = Assertion{} }
func (m *Assertion) String() string            { return proto.CompactTextString(m) }
func (*Assertion) ProtoMessage()               {}
func (*Assertion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Header struct {
	Name   string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type HttpCheck struct {
	Name     string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Path     string    `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Protocol string    `protobuf:"bytes,3,opt,name=protocol" json:"protocol,omitempty"`
	Port     int32     `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
	Verb     string    `protobuf:"bytes,5,opt,name=verb" json:"verb,omitempty"`
	Headers  []*Header `protobuf:"bytes,6,rep,name=headers" json:"headers,omitempty"`
	Body     string    `protobuf:"bytes,7,opt,name=body" json:"body,omitempty"`
}

func (m *HttpCheck) Reset()                    { *m = HttpCheck{} }
func (m *HttpCheck) String() string            { return proto.CompactTextString(m) }
func (*HttpCheck) ProtoMessage()               {}
func (*HttpCheck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *HttpCheck) GetHeaders() []*Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

type Metric struct {
	Name  string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value float64  `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
	Tags  []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type HttpResponse struct {
	Code    int32     `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Body    string    `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	Headers []*Header `protobuf:"bytes,3,rep,name=headers" json:"headers,omitempty"`
	Metrics []*Metric `protobuf:"bytes,4,rep,name=metrics" json:"metrics,omitempty"`
	Host    string    `protobuf:"bytes,5,opt,name=host" json:"host,omitempty"`
}

func (m *HttpResponse) Reset()                    { *m = HttpResponse{} }
func (m *HttpResponse) String() string            { return proto.CompactTextString(m) }
func (*HttpResponse) ProtoMessage()               {}
func (*HttpResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *HttpResponse) GetHeaders() []*Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *HttpResponse) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type CheckResourceResponse struct {
	Id    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Check *Check `protobuf:"bytes,2,opt,name=check" json:"check,omitempty"`
	Error string `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *CheckResourceResponse) Reset()                    { *m = CheckResourceResponse{} }
func (m *CheckResourceResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckResourceResponse) ProtoMessage()               {}
func (*CheckResourceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CheckResourceResponse) GetCheck() *Check {
	if m != nil {
		return m.Check
	}
	return nil
}

type ResourceResponse struct {
	Responses []*CheckResourceResponse `protobuf:"bytes,1,rep,name=responses" json:"responses,omitempty"`
}

func (m *ResourceResponse) Reset()                    { *m = ResourceResponse{} }
func (m *ResourceResponse) String() string            { return proto.CompactTextString(m) }
func (*ResourceResponse) ProtoMessage()               {}
func (*ResourceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ResourceResponse) GetResponses() []*CheckResourceResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type CheckResourceRequest struct {
	Checks []*Check `protobuf:"bytes,1,rep,name=checks" json:"checks,omitempty"`
}

func (m *CheckResourceRequest) Reset()                    { *m = CheckResourceRequest{} }
func (m *CheckResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckResourceRequest) ProtoMessage()               {}
func (*CheckResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CheckResourceRequest) GetChecks() []*Check {
	if m != nil {
		return m.Checks
	}
	return nil
}

type TestCheckRequest struct {
	MaxHosts int32      `protobuf:"varint,1,opt,name=max_hosts" json:"max_hosts,omitempty"`
	Deadline *Timestamp `protobuf:"bytes,2,opt,name=deadline" json:"deadline,omitempty"`
	Check    *Check     `protobuf:"bytes,3,opt,name=check" json:"check,omitempty"`
}

func (m *TestCheckRequest) Reset()                    { *m = TestCheckRequest{} }
func (m *TestCheckRequest) String() string            { return proto.CompactTextString(m) }
func (*TestCheckRequest) ProtoMessage()               {}
func (*TestCheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *TestCheckRequest) GetDeadline() *Timestamp {
	if m != nil {
		return m.Deadline
	}
	return nil
}

func (m *TestCheckRequest) GetCheck() *Check {
	if m != nil {
		return m.Check
	}
	return nil
}

type TestCheckResponse struct {
	Responses []*CheckResponse `protobuf:"bytes,1,rep,name=responses" json:"responses,omitempty"`
	Error     string           `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *TestCheckResponse) Reset()                    { *m = TestCheckResponse{} }
func (m *TestCheckResponse) String() string            { return proto.CompactTextString(m) }
func (*TestCheckResponse) ProtoMessage()               {}
func (*TestCheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *TestCheckResponse) GetResponses() []*CheckResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type CheckResponse struct {
	Target   *Target `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
	Response *Any    `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
	Error    string  `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	Passing  bool    `protobuf:"varint,4,opt,name=passing" json:"passing,omitempty"`
}

func (m *CheckResponse) Reset()                    { *m = CheckResponse{} }
func (m *CheckResponse) String() string            { return proto.CompactTextString(m) }
func (*CheckResponse) ProtoMessage()               {}
func (*CheckResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CheckResponse) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *CheckResponse) GetResponse() *Any {
	if m != nil {
		return m.Response
	}
	return nil
}

type CheckResult struct {
	CheckId    string           `protobuf:"bytes,1,opt,name=check_id" json:"check_id,omitempty"`
	CustomerId string           `protobuf:"bytes,2,opt,name=customer_id" json:"customer_id,omitempty"`
	Timestamp  *Timestamp       `protobuf:"bytes,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Passing    bool             `protobuf:"varint,4,opt,name=passing" json:"passing,omitempty"`
	Responses  []*CheckResponse `protobuf:"bytes,5,rep,name=responses" json:"responses,omitempty"`
	Target     *Target          `protobuf:"bytes,6,opt,name=target" json:"target,omitempty"`
	CheckName  string           `protobuf:"bytes,7,opt,name=check_name" json:"check_name,omitempty"`
	Version    int32            `protobuf:"varint,8,opt,name=version" json:"version,omitempty"`
}

func (m *CheckResult) Reset()                    { *m = CheckResult{} }
func (m *CheckResult) String() string            { return proto.CompactTextString(m) }
func (*CheckResult) ProtoMessage()               {}
func (*CheckResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CheckResult) GetTimestamp() *Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *CheckResult) GetResponses() []*CheckResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

func (m *CheckResult) GetTarget() *Target {
	if m != nil {
		return m.Target
	}
	return nil
}

type DiscoveryEvent struct {
	CustomerId string     `protobuf:"bytes,1,opt,name=customer_id" json:"customer_id,omitempty"`
	Timestamp  *Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Type       string     `protobuf:"bytes,3,opt,name=type" json:"type,omitempty"`
	Resource   string     `protobuf:"bytes,4,opt,name=resource" json:"resource,omitempty"`
}

func (m *DiscoveryEvent) Reset()                    { *m = DiscoveryEvent{} }
func (m *DiscoveryEvent) String() string            { return proto.CompactTextString(m) }
func (*DiscoveryEvent) ProtoMessage()               {}
func (*DiscoveryEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DiscoveryEvent) GetTimestamp() *Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

var E_IsRequired = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         60000,
	Name:          "checker.is_required",
	Tag:           "varint,60000,opt,name=is_required",
}

func init() {
	proto.RegisterType((*Any)(nil), "checker.Any")
	proto.RegisterType((*Timestamp)(nil), "checker.Timestamp")
	proto.RegisterType((*Target)(nil), "checker.Target")
	proto.RegisterType((*Check)(nil), "checker.Check")
	proto.RegisterType((*Assertion)(nil), "checker.Assertion")
	proto.RegisterType((*Header)(nil), "checker.Header")
	proto.RegisterType((*HttpCheck)(nil), "checker.HttpCheck")
	proto.RegisterType((*Metric)(nil), "checker.Metric")
	proto.RegisterType((*HttpResponse)(nil), "checker.HttpResponse")
	proto.RegisterType((*CheckResourceResponse)(nil), "checker.CheckResourceResponse")
	proto.RegisterType((*ResourceResponse)(nil), "checker.ResourceResponse")
	proto.RegisterType((*CheckResourceRequest)(nil), "checker.CheckResourceRequest")
	proto.RegisterType((*TestCheckRequest)(nil), "checker.TestCheckRequest")
	proto.RegisterType((*TestCheckResponse)(nil), "checker.TestCheckResponse")
	proto.RegisterType((*CheckResponse)(nil), "checker.CheckResponse")
	proto.RegisterType((*CheckResult)(nil), "checker.CheckResult")
	proto.RegisterType((*DiscoveryEvent)(nil), "checker.DiscoveryEvent")
	proto.RegisterExtension(E_IsRequired)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Checker service

type CheckerClient interface {
	TestCheck(ctx context.Context, in *TestCheckRequest, opts ...grpc.CallOption) (*TestCheckResponse, error)
	CreateCheck(ctx context.Context, in *CheckResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error)
	RetrieveCheck(ctx context.Context, in *CheckResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error)
	UpdateCheck(ctx context.Context, in *CheckResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error)
	DeleteCheck(ctx context.Context, in *CheckResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error)
}

type checkerClient struct {
	cc *grpc.ClientConn
}

func NewCheckerClient(cc *grpc.ClientConn) CheckerClient {
	return &checkerClient{cc}
}

func (c *checkerClient) TestCheck(ctx context.Context, in *TestCheckRequest, opts ...grpc.CallOption) (*TestCheckResponse, error) {
	out := new(TestCheckResponse)
	err := grpc.Invoke(ctx, "/checker.Checker/TestCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerClient) CreateCheck(ctx context.Context, in *CheckResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error) {
	out := new(ResourceResponse)
	err := grpc.Invoke(ctx, "/checker.Checker/CreateCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerClient) RetrieveCheck(ctx context.Context, in *CheckResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error) {
	out := new(ResourceResponse)
	err := grpc.Invoke(ctx, "/checker.Checker/RetrieveCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerClient) UpdateCheck(ctx context.Context, in *CheckResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error) {
	out := new(ResourceResponse)
	err := grpc.Invoke(ctx, "/checker.Checker/UpdateCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkerClient) DeleteCheck(ctx context.Context, in *CheckResourceRequest, opts ...grpc.CallOption) (*ResourceResponse, error) {
	out := new(ResourceResponse)
	err := grpc.Invoke(ctx, "/checker.Checker/DeleteCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Checker service

type CheckerServer interface {
	TestCheck(context.Context, *TestCheckRequest) (*TestCheckResponse, error)
	CreateCheck(context.Context, *CheckResourceRequest) (*ResourceResponse, error)
	RetrieveCheck(context.Context, *CheckResourceRequest) (*ResourceResponse, error)
	UpdateCheck(context.Context, *CheckResourceRequest) (*ResourceResponse, error)
	DeleteCheck(context.Context, *CheckResourceRequest) (*ResourceResponse, error)
}

func RegisterCheckerServer(s *grpc.Server, srv CheckerServer) {
	s.RegisterService(&_Checker_serviceDesc, srv)
}

func _Checker_TestCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(TestCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CheckerServer).TestCheck(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Checker_CreateCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CheckResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CheckerServer).CreateCheck(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Checker_RetrieveCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CheckResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CheckerServer).RetrieveCheck(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Checker_UpdateCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CheckResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CheckerServer).UpdateCheck(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Checker_DeleteCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CheckResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CheckerServer).DeleteCheck(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Checker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "checker.Checker",
	HandlerType: (*CheckerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestCheck",
			Handler:    _Checker_TestCheck_Handler,
		},
		{
			MethodName: "CreateCheck",
			Handler:    _Checker_CreateCheck_Handler,
		},
		{
			MethodName: "RetrieveCheck",
			Handler:    _Checker_RetrieveCheck_Handler,
		},
		{
			MethodName: "UpdateCheck",
			Handler:    _Checker_UpdateCheck_Handler,
		},
		{
			MethodName: "DeleteCheck",
			Handler:    _Checker_DeleteCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 911 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x56, 0xcd, 0x8e, 0xdb, 0x54,
	0x14, 0xae, 0xc7, 0x63, 0x27, 0x39, 0xc9, 0x4c, 0xa7, 0x77, 0x68, 0x09, 0x23, 0x4d, 0x89, 0x0c,
	0x45, 0x80, 0x50, 0x46, 0xa4, 0x88, 0x05, 0xbb, 0x4e, 0xa7, 0xa8, 0x08, 0x8d, 0x28, 0xd5, 0xb0,
	0x61, 0x13, 0x79, 0xec, 0x43, 0x62, 0xd5, 0xf1, 0x35, 0xf7, 0xde, 0x44, 0x44, 0x62, 0xc1, 0x8b,
	0xb0, 0xe5, 0x89, 0x58, 0x82, 0xc4, 0x8b, 0x20, 0x71, 0xee, 0x8f, 0x9d, 0xd8, 0x49, 0x59, 0xcd,
	0x2e, 0x3e, 0x3e, 0x3f, 0xdf, 0xf7, 0x9d, 0x1f, 0x07, 0x4e, 0x4b, 0xc1, 0x15, 0xbf, 0x48, 0xe6,
	0x98, 0xbc, 0x41, 0x31, 0x36, 0x4f, 0xac, 0xe3, 0x1e, 0xcf, 0x46, 0x33, 0xce, 0x67, 0x39, 0x5e,
	0x18, 0xf3, 0xed, 0xf2, 0xa7, 0x8b, 0x14, 0x65, 0x22, 0xb2, 0x52, 0x71, 0xe7, 0x1a, 0x4d, 0xc0,
	0x7f, 0x56, 0xac, 0xd9, 0x23, 0xe8, 0xaa, 0x75, 0x89, 0xd3, 0xa5, 0xc8, 0x87, 0xde, 0xc8, 0xfb,
	0xb8, 0x77, 0x79, 0xf8, 0xdb, 0x1f, 0xe7, 0x1e, 0x3b, 0x85, 0x60, 0x15, 0xe7, 0x4b, 0x1c, 0x1e,
	0x90, 0x71, 0x60, 0x8d, 0xd1, 0xe7, 0xd0, 0xbb, 0xc9, 0x16, 0x28, 0x55, 0xbc, 0x28, 0xd9, 0x43,
	0xe8, 0x48, 0x4c, 0x78, 0x91, 0x4a, 0x13, 0xe8, 0xbb, 0xc0, 0x23, 0x08, 0x8a, 0xb8, 0xe0, 0xd2,
	0x04, 0xfa, 0xd1, 0x35, 0x84, 0x37, 0xb1, 0x98, 0xa1, 0x62, 0x03, 0x38, 0x2c, 0xe2, 0x05, 0xda,
	0x2a, 0x8c, 0xc1, 0xa1, 0xae, 0x6b, 0xbc, 0xaa, 0x9a, 0x27, 0x70, 0x90, 0xa5, 0x43, 0x7f, 0xcb,
	0x72, 0x1f, 0x3a, 0x71, 0x9a, 0x0a, 0x94, 0x72, 0x78, 0xa8, 0xcd, 0xd1, 0x5f, 0x1e, 0x04, 0xcf,
	0x35, 0x47, 0x06, 0xc6, 0xd9, 0x26, 0x23, 0x12, 0x59, 0xa1, 0x50, 0x10, 0x62, 0x93, 0x30, 0x70,
	0xe1, 0x4f, 0x20, 0x54, 0xa6, 0xb8, 0x49, 0xda, 0x9f, 0xdc, 0x1f, 0x57, 0x72, 0x59, 0x4c, 0xce,
	0xed, 0x43, 0xe8, 0xe6, 0xb1, 0x54, 0x53, 0xb1, 0x2c, 0x4c, 0x99, 0xfe, 0x84, 0x6d, 0x1c, 0x6b,
	0xbe, 0x1f, 0x01, 0x18, 0xe3, 0x54, 0x96, 0x98, 0x0c, 0x03, 0xe3, 0x37, 0xa8, 0xfd, 0x48, 0x4b,
	0x97, 0x8d, 0x39, 0x9e, 0xe1, 0x16, 0x0f, 0x8a, 0x8d, 0xa5, 0x44, 0xa1, 0x32, 0x5e, 0xc8, 0x61,
	0x67, 0xe4, 0x37, 0x6a, 0x3c, 0xab, 0x5e, 0x45, 0x3f, 0x42, 0xaf, 0x7e, 0x60, 0x0f, 0xc0, 0x7f,
	0x83, 0xeb, 0x46, 0x57, 0x8e, 0xb6, 0xbb, 0xd2, 0x63, 0x67, 0x30, 0x10, 0x98, 0xc7, 0x26, 0xeb,
	0x3c, 0x2b, 0xdb, 0xd2, 0xf1, 0x12, 0x45, 0x5c, 0xa4, 0x4e, 0xba, 0xcf, 0x20, 0x7c, 0x89, 0x71,
	0x8a, 0xa2, 0x46, 0xb8, 0x9d, 0xf9, 0x18, 0x42, 0x93, 0x59, 0xf7, 0xcd, 0x27, 0xef, 0xdf, 0x3d,
	0xe8, 0xbd, 0x54, 0xaa, 0xb4, 0x62, 0xef, 0xf4, 0xae, 0x8c, 0xd5, 0xbc, 0xd1, 0x3b, 0x6a, 0x81,
	0x99, 0xab, 0x84, 0xe7, 0x0d, 0x18, 0xda, 0x97, 0x0b, 0x65, 0x30, 0x04, 0x1b, 0xdb, 0x0a, 0xc5,
	0xad, 0xd1, 0xb0, 0xf2, 0x1b, 0x41, 0x67, 0x6e, 0xd0, 0x49, 0x12, 0xce, 0x6f, 0xf4, 0xca, 0xa1,
	0x26, 0x0c, 0xb7, 0x3c, 0x5d, 0x93, 0x7a, 0x9a, 0xcd, 0x53, 0x08, 0xaf, 0x51, 0x89, 0x2c, 0x69,
	0x61, 0x6b, 0x28, 0xe4, 0xe9, 0x97, 0x2a, 0x9e, 0x49, 0x82, 0xa4, 0x49, 0xfd, 0x0a, 0x03, 0xcd,
	0xe9, 0x35, 0xca, 0x92, 0x14, 0x43, 0xfd, 0x36, 0xe1, 0xa9, 0x0d, 0x0d, 0xea, 0x02, 0x56, 0xdb,
	0x2d, 0x40, 0xfe, 0x7e, 0x40, 0xe4, 0xb1, 0x30, 0x10, 0xf4, 0x70, 0x36, 0x3d, 0x36, 0xd0, 0xe6,
	0x5c, 0x2a, 0x4b, 0x34, 0xfa, 0x1e, 0x1e, 0x1a, 0x35, 0xa9, 0x3c, 0x5f, 0x8a, 0x04, 0x6b, 0x18,
	0xdb, 0xa3, 0x7c, 0x0e, 0x81, 0x49, 0x62, 0x50, 0xf4, 0x27, 0xc7, 0x75, 0x4a, 0xdb, 0x08, 0xa2,
	0x87, 0x42, 0x70, 0x61, 0x35, 0x8e, 0x5e, 0xc0, 0xc9, 0x4e, 0x36, 0x5a, 0x52, 0xe1, 0x7e, 0xeb,
	0xcd, 0xd4, 0xc0, 0x1e, 0x37, 0xb3, 0xb4, 0x43, 0xa2, 0x2f, 0xe1, 0x9d, 0xd6, 0x8b, 0x9f, 0x69,
	0x12, 0x14, 0x7b, 0x0c, 0xa1, 0x09, 0xac, 0xf2, 0xb4, 0xd0, 0x90, 0x9e, 0x27, 0x37, 0xe4, 0xe7,
	0x62, 0x6d, 0xcc, 0xbb, 0xd0, 0x5b, 0xc4, 0xbf, 0x4c, 0x35, 0x6f, 0x7b, 0x18, 0xaa, 0xae, 0x7f,
	0x0a, 0xdd, 0x94, 0x84, 0xcb, 0xb3, 0x02, 0x1d, 0xb9, 0x3d, 0x5b, 0xe6, 0x7c, 0x3f, 0xa8, 0x54,
	0xf0, 0xf7, 0xa9, 0xe0, 0xae, 0xd1, 0x35, 0x3c, 0xd8, 0xaa, 0xee, 0xd8, 0x7f, 0xb2, 0xcb, 0xfe,
	0xd1, 0x0e, 0x7b, 0xeb, 0x5a, 0x6b, 0x69, 0x1a, 0x1e, 0x95, 0x70, 0xd4, 0x7c, 0xff, 0x7e, 0x7d,
	0x3d, 0xbc, 0xbd, 0xd7, 0x83, 0xe4, 0xe9, 0x56, 0xb5, 0x1c, 0xa3, 0xc6, 0x3d, 0x68, 0x35, 0x4b,
	0x6f, 0x64, 0x49, 0x57, 0x20, 0x2b, 0x66, 0x66, 0x1b, 0xba, 0xd1, 0xdf, 0x1e, 0xf4, 0xab, 0x92,
	0xcb, 0x5c, 0xd1, 0xfd, 0xeb, 0xda, 0x0b, 0x53, 0x4f, 0xc3, 0x29, 0xf4, 0x93, 0xa5, 0x54, 0x7c,
	0x81, 0x42, 0x1b, 0xed, 0x64, 0x3e, 0x81, 0x9e, 0xaa, 0xf4, 0x72, 0x02, 0xed, 0xbb, 0x57, 0xed,
	0x72, 0x4d, 0x69, 0x82, 0xff, 0x95, 0x66, 0x43, 0x3d, 0xdc, 0x4f, 0x9d, 0x55, 0xc7, 0xd0, 0xac,
	0x5e, 0xa7, 0xe2, 0x47, 0x6b, 0x2d, 0xe9, 0x18, 0x0d, 0xbb, 0xba, 0xef, 0x51, 0x0e, 0xc7, 0x57,
	0x99, 0x4c, 0x38, 0x59, 0xd7, 0x2f, 0x56, 0x58, 0xa8, 0x36, 0x1f, 0x6f, 0x97, 0xcf, 0x5b, 0x27,
	0xc3, 0xac, 0xb2, 0xfe, 0x62, 0x58, 0x31, 0x4f, 0x8c, 0xf6, 0x66, 0x5a, 0xed, 0x7d, 0x9b, 0xfc,
	0x7b, 0x00, 0x9d, 0xe7, 0x36, 0x8a, 0x5d, 0xd1, 0x87, 0xaa, 0x1a, 0x0d, 0xf6, 0xde, 0x26, 0x59,
	0x6b, 0x58, 0xcf, 0xce, 0xf6, 0xbd, 0x72, 0x4b, 0x71, 0x8f, 0x7d, 0x43, 0xed, 0x11, 0x18, 0x2b,
	0xb4, 0x79, 0xce, 0xdf, 0xb6, 0x45, 0x36, 0xd7, 0xa6, 0xcc, 0xce, 0x7e, 0xdd, 0x63, 0xdf, 0xc2,
	0xd1, 0x6b, 0x7d, 0x13, 0x70, 0x75, 0x07, 0xc9, 0x08, 0xd7, 0x0f, 0x65, 0x7a, 0x27, 0xb8, 0x28,
	0xd5, 0x15, 0xe6, 0x78, 0x07, 0xa9, 0xbe, 0xfa, 0x02, 0xfa, 0x99, 0x9c, 0x0a, 0x72, 0xcd, 0x04,
	0xa6, 0x94, 0xca, 0xfe, 0x05, 0x19, 0x57, 0x7f, 0x41, 0xc6, 0x5f, 0x67, 0x98, 0xa7, 0xdf, 0x95,
	0xf6, 0x1b, 0xf8, 0xcf, 0x9f, 0xba, 0x8f, 0xdd, 0xcb, 0x11, 0x1c, 0x27, 0x7c, 0xcc, 0x4b, 0x89,
	0xce, 0xf3, 0x72, 0x70, 0x49, 0xdf, 0x62, 0xf2, 0x79, 0xa5, 0x9f, 0x5e, 0x79, 0xb7, 0xa1, 0x31,
	0x3f, 0xfd, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x40, 0x06, 0x95, 0xf1, 0x08, 0x00, 0x00,
}
